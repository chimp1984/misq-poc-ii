plugins {
    id 'java-library'
    id 'com.google.protobuf' version '0.8.16'
}

repositories {
    mavenCentral()
}

dependencies {
    implementation project(':api')
    implementation project(':wallets:wallet-installer')

    // Get recommended versions from the common-platform -> grpc-platform projects.
    api platform(project(':platforms:common-platform'))
    api platform(project(':platforms:grpc-platform'))

    implementation 'javax.annotation:javax.annotation-api'

    implementation 'com.google.protobuf:protobuf-java'

    implementation 'io.grpc:grpc-api'
    implementation 'io.grpc:grpc-core'
    implementation 'io.grpc:grpc-context'
    implementation 'io.grpc:grpc-netty-shaded'
    implementation 'io.grpc:grpc-protobuf'
    implementation 'io.grpc:grpc-services'
    implementation 'io.grpc:grpc-stub'

    implementation 'org.codehaus.mojo:animal-sniffer-annotations'

    implementation 'com.google.guava:guava'

    implementation 'org.slf4j:slf4j-api'
    implementation 'ch.qos.logback:logback-core'
    implementation 'ch.qos.logback:logback-classic'

    api platform(project(':platforms:test-platform'))
    testImplementation 'org.junit.jupiter:junit-jupiter-api'
    testRuntimeOnly 'org.junit.jupiter:junit-jupiter-engine'
}

ext {
    // Default generated src dirs.
    generatedGrpcProtoSrcDir = 'build/generated/source/main/grpc'
    generatedProtoSrcDir = 'build/generated/source/main/java'
}

sourceSets.main {
    java.srcDirs += [generatedProtoSrcDir, generatedGrpcProtoSrcDir]
}


protobuf {
    protoc {
        artifact = 'com.google.protobuf:protoc:3.12.4'
    }
    plugins {
        grpc {
            artifact = 'io.grpc:protoc-gen-grpc-java:1.38.0'
        }
    }
    generateProtoTasks {
        all()*.plugins { grpc {} }
    }
    generatedFilesBaseDir = "$projectDir/build/generated/source"
}

/*
tasks.named("sourcesJar") {
    // The 'dependsOn generateProto' configuration avoids gradle warning:  Task ':proto:sourcesJar' uses
    // this output of task ':proto:generateProto' without declaring an explicit or implicit dependency.
    dependsOn generateProto
}
*/

jar {
    // Exclude .proto files from generated jar.
    exclude '*.proto'
    includeEmptyDirs false
}


test {
    useJUnitPlatform()
}